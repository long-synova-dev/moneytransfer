// <auto-generated />
using MoneyTransferApp.Core.Entities.Gdpr;
using MoneyTransferApp.Core.Entities.GRC;
using MoneyTransferApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace MoneyTransferApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.AddOn", b =>
                {
                    b.Property<int>("AddOnId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddOnFrequency")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("AddOnNameTransId");

                    b.Property<string>("AddOnType")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("InternalTitle")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("MaximumCapcity");

                    b.Property<string>("ReepayAccountId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReepayAddOnId")
                        .HasColumnType("varchar(20)");

                    b.HasKey("AddOnId");

                    b.ToTable("AddOn","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.BillingPlan", b =>
                {
                    b.Property<int>("BillingPlanId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("CanBuyMoreStorage");

                    b.Property<bool?>("CanBuyMoreUsers");

                    b.Property<Guid?>("DescriptionTransId");

                    b.Property<string>("InternalTitle")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDefault");

                    b.Property<int?>("MaximumProcesses");

                    b.Property<int?>("MaximumStorage");

                    b.Property<int?>("MaximumUsers");

                    b.Property<int>("Order");

                    b.Property<string>("PlanFrequency")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("PlanNameTransId");

                    b.Property<string>("PlanType")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReepayAccountId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReepayPlanId")
                        .HasColumnType("varchar(20)");

                    b.HasKey("BillingPlanId");

                    b.ToTable("BillingPlan","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountOwnerId");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(300);

                    b.Property<string>("CompanyNumber")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CountryVatCode")
                        .HasColumnType("varchar(3)");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<DateTimeOffset?>("GoLiveDate");

                    b.Property<DateTimeOffset?>("TrialEndDate");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("VatRegistrationNo")
                        .HasColumnType("varchar(50)");

                    b.HasKey("CompanyId");

                    b.HasIndex("AccountOwnerId")
                        .IsUnique()
                        .HasFilter("[AccountOwnerId] IS NOT NULL");

                    b.ToTable("Company","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.CompanyAddOn", b =>
                {
                    b.Property<string>("CompanyAddOnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddOnId")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("CompanyAddOnId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAddOn","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.CompanyDetail", b =>
                {
                    b.Property<Guid>("CompanyDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasMaxLength(128);

                    b.Property<Guid>("CompanyId");

                    b.Property<int?>("CountryTagId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<int?>("CurrencyTagId");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<int?>("IndustryTagId");

                    b.Property<int?>("LastResult");

                    b.Property<int?>("NumOfEmployeesTagId");

                    b.Property<string>("Registration")
                        .HasMaxLength(256);

                    b.Property<int?>("TurnOver");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("CompanyDetailId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("CountryTagId");

                    b.HasIndex("CurrencyTagId");

                    b.HasIndex("IndustryTagId");

                    b.HasIndex("NumOfEmployeesTagId");

                    b.ToTable("CompanyDetail","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.CompanySubscription", b =>
                {
                    b.Property<string>("CompanySubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BillingPlanId")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("CompanySubscriptionId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanySubscription","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.ContactPoint", b =>
                {
                    b.Property<Guid>("ContactPointId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("ContactPointType")
                        .HasMaxLength(50);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("ContactPointId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ContactPoint","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.FileUploaded", b =>
                {
                    b.Property<int>("FileUploadedId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Directory")
                        .HasMaxLength(100);

                    b.Property<string>("FileOriginalName")
                        .HasMaxLength(100);

                    b.Property<string>("FilePath");

                    b.Property<double>("FileSize");

                    b.Property<int>("FileTypeId");

                    b.Property<int?>("RefferenceId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("FileUploadedId");

                    b.ToTable("FileUploaded","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("Date");

                    b.Property<string>("FieldName")
                        .HasMaxLength(250);

                    b.Property<bool?>("FileChanged");

                    b.Property<int>("HistoryType");

                    b.Property<string>("NewValue");

                    b.Property<string>("OldValue");

                    b.Property<int>("ReferId");

                    b.Property<Guid>("UserId");

                    b.HasKey("HistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("History","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.Subsidiary", b =>
                {
                    b.Property<Guid>("SubsidiaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasMaxLength(128);

                    b.Property<Guid>("CompanyId");

                    b.Property<int?>("CountryTagId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("Registration")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("SubsidiaryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryTagId");

                    b.ToTable("Subsidiary","Client");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Dbo.AnonymousResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Results");

                    b.Property<DateTime?>("SubmitTime");

                    b.HasKey("Id");

                    b.ToTable("AnonymousResults");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Dbo.DoTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsCompleted");

                    b.Property<bool?>("IsReceivedPdf");

                    b.Property<short?>("Point");

                    b.Property<DateTime?>("SubmitTime");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DoTest");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Dbo.UsersInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.Property<string>("CompanyVat");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool?>("IsNewsLetter");

                    b.Property<bool?>("IsUseFreeAcc");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("Id");

                    b.ToTable("UsersInfo");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnswerTransId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("InternalDescription")
                        .HasMaxLength(128);

                    b.Property<int>("QuestionId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int>("ConditionType");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<int?>("ParentConditionId");

                    b.Property<int?>("ReferenceId");

                    b.Property<int>("RuleId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<int?>("Value");

                    b.HasKey("ConditionId");

                    b.HasIndex("ParentConditionId");

                    b.HasIndex("RuleId");

                    b.ToTable("Condition","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Counterpart", b =>
                {
                    b.Property<int>("CounterpartId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasMaxLength(128);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(256);

                    b.Property<string>("ContactFirstName")
                        .HasMaxLength(128);

                    b.Property<string>("ContactLastName")
                        .HasMaxLength(128);

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50);

                    b.Property<int?>("ContractLanguageId");

                    b.Property<string>("CounterpartName")
                        .HasMaxLength(256);

                    b.Property<int?>("CountryTagId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<int?>("DataProcessorId");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool?>("HasSignaturePerson");

                    b.Property<string>("Registration")
                        .HasMaxLength(256);

                    b.Property<string>("SignatureEmail")
                        .HasMaxLength(256);

                    b.Property<string>("SignatureFirstName")
                        .HasMaxLength(128);

                    b.Property<string>("SignatureLastName")
                        .HasMaxLength(128);

                    b.Property<string>("SignaturePhoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("SignatureTitle")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("VatRegistrationNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("CounterpartId");

                    b.HasIndex("DataProcessorId");

                    b.ToTable("Counterpart","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.CounterpartSubsidiary", b =>
                {
                    b.Property<int>("CounterpartSubsidiaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasMaxLength(128);

                    b.Property<int?>("CounterpartId");

                    b.Property<int?>("CountryTagId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("Registration")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20);

                    b.HasKey("CounterpartSubsidiaryId");

                    b.HasIndex("CounterpartId");

                    b.ToTable("CounterpartSubsidiary","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.DataProcessor", b =>
                {
                    b.Property<int>("DataProcessorId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApprovedBy");

                    b.Property<DateTimeOffset?>("ApprovedOn");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("CounterpartName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<int?>("DataProcessorTemplateId");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<int?>("IdCopiedFrom");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsCounterpartOk");

                    b.Property<bool?>("IsLocked");

                    b.Property<Guid?>("LastSentBy");

                    b.Property<DateTimeOffset?>("LastSentOn");

                    b.Property<long?>("ProccessorTagId");

                    b.Property<int?>("ProcessorType");

                    b.Property<Guid?>("ResponsibleId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<bool?>("UseExisting");

                    b.Property<string>("Version")
                        .HasMaxLength(20);

                    b.HasKey("DataProcessorId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DataProcessorTemplateId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("DataProcessor","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.DataProcessorChangeLog", b =>
                {
                    b.Property<int>("DataProcessorChangeLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<int>("DataProcessorTemplateId");

                    b.Property<string>("Message")
                        .HasMaxLength(1024);

                    b.HasKey("DataProcessorChangeLogId");

                    b.HasIndex("DataProcessorTemplateId");

                    b.ToTable("DataProcessorChangeLog","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.DataProcessorTemplate", b =>
                {
                    b.Property<int>("DataProcessorTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContentTransId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<int>("DataProcessorTypeId");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<Guid?>("DescriptionTransId");

                    b.Property<string>("InternalTitle");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("TitleTransId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("Version");

                    b.HasKey("DataProcessorTemplateId");

                    b.ToTable("DataProcessorTemplate","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.DeletionJustification", b =>
                {
                    b.Property<int>("DeletionJustificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<long>("DataTypeTagId");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Justification");

                    b.Property<int>("PurposeId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("DeletionJustificationId");

                    b.HasIndex("PurposeId");

                    b.ToTable("DeletionJustification","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.GdprDocument", b =>
                {
                    b.Property<int>("GdprDocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("Content");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(256);

                    b.Property<int?>("DocumentType");

                    b.Property<int?>("ReferenceId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("GdprDocumentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("GdprDocument","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.GdprTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assertions")
                        .HasColumnType("varchar(128)");

                    b.Property<Guid?>("CompanyId");

                    b.Property<int?>("ControlType1");

                    b.Property<int?>("ControlType2");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool>("EnableTaskReview");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<string>("FeedbackToAdmin")
                        .HasMaxLength(4000);

                    b.Property<bool?>("IsAutoGenerated");

                    b.Property<bool>("IsControl");

                    b.Property<bool>("IsPublished");

                    b.Property<bool?>("IsRecurring");

                    b.Property<int?>("MasterTaskId");

                    b.Property<float>("Order");

                    b.Property<int?>("PerformerDeadline");

                    b.Property<int?>("ProcessId");

                    b.Property<int?>("ReviewerDueDate");

                    b.Property<int?>("RiskId");

                    b.Property<int?>("ScheduleType");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.Property<string>("TaskDescription");

                    b.Property<Guid?>("TaskPerformerId");

                    b.Property<Guid?>("TaskResponsibleId");

                    b.Property<string>("TaskResultComment")
                        .HasMaxLength(4000);

                    b.Property<Guid?>("TaskReviewerId");

                    b.Property<int>("TaskStatus");

                    b.Property<string>("TaskTitle")
                        .HasMaxLength(256);

                    b.Property<int?>("TemplateId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("TaskId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RiskId");

                    b.HasIndex("TaskPerformerId");

                    b.HasIndex("TaskResponsibleId");

                    b.HasIndex("TaskReviewerId");

                    b.ToTable("Task","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.GdprWizardStatus", b =>
                {
                    b.Property<int>("GdprWizardStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<bool?>("IsStep1Completed");

                    b.Property<bool?>("IsStep2Completed");

                    b.Property<bool?>("IsStep3Completed");

                    b.Property<int?>("Step1Percent");

                    b.Property<int?>("Step2Percent");

                    b.Property<int?>("Step3Percent");

                    b.HasKey("GdprWizardStatusId");

                    b.ToTable("GdprWizardStatus","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.KeyValue", b =>
                {
                    b.Property<int>("KeyValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentId");

                    b.Property<int?>("DocumentType");

                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<string>("Value");

                    b.HasKey("KeyValueId");

                    b.ToTable("KeyValue","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool?>("IsLocked");

                    b.Property<int?>("PolicyTemplateId");

                    b.Property<int>("PolicyType");

                    b.Property<int?>("ProcessId");

                    b.Property<Guid?>("ResponsibleId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<bool?>("UseExisting");

                    b.Property<string>("Version")
                        .HasMaxLength(10);

                    b.HasKey("PolicyId");

                    b.HasIndex("PolicyTemplateId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Policy","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.PolicyChangeLog", b =>
                {
                    b.Property<int>("PolicyChangeLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<string>("Message")
                        .HasMaxLength(1024);

                    b.Property<int>("PolicyTemplateId");

                    b.HasKey("PolicyChangeLogId");

                    b.HasIndex("PolicyTemplateId");

                    b.ToTable("PolicyChangeLog","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.PolicyTemplate", b =>
                {
                    b.Property<int>("PolicyTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContentTransId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<Guid?>("DescriptionTransId");

                    b.Property<string>("InternalTitle");

                    b.Property<bool>("IsActive");

                    b.Property<int>("PolicyTypeId");

                    b.Property<Guid>("TitleTransId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("Version");

                    b.HasKey("PolicyTemplateId");

                    b.ToTable("PolicyTemplate","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("ProcessCustomName")
                        .HasMaxLength(256);

                    b.Property<long>("ProcessTagId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("ProcessId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Process","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Purpose", b =>
                {
                    b.Property<int>("PurposeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Justification");

                    b.Property<long>("PersonTypeTagId");

                    b.Property<long>("ProcessTagId");

                    b.Property<long>("PurposeTagId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("PurposeId");

                    b.ToTable("Purpose","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<Guid?>("HelpDescriptionTransId");

                    b.Property<Guid?>("HelpTitleTransId");

                    b.Property<string>("InternalDescription")
                        .HasMaxLength(128);

                    b.Property<bool>("IsYesNoQuestion");

                    b.Property<string>("QuestionCode")
                        .HasMaxLength(5);

                    b.Property<Guid>("QuestionTransId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("QuestionId");

                    b.ToTable("Question","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Risk", b =>
                {
                    b.Property<int>("RiskId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool?>("IsAutoGenerated");

                    b.Property<bool?>("IsPublished");

                    b.Property<string>("LegalReference");

                    b.Property<int?>("OrganizationLevel");

                    b.Property<int?>("ProcessId");

                    b.Property<string>("RiskDescription");

                    b.Property<int?>("RiskImpact");

                    b.Property<int?>("RiskLikelihood");

                    b.Property<string>("RiskName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("RiskOwnerId");

                    b.Property<Guid?>("RiskResponsibleId");

                    b.Property<int?>("RiskType");

                    b.Property<int?>("TemplateId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("RiskId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RiskOwnerId");

                    b.HasIndex("RiskResponsibleId");

                    b.ToTable("Risk","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Rule", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("InternalPurposeDescription")
                        .HasMaxLength(1024);

                    b.Property<float>("Order");

                    b.Property<int>("RuleTypeId");

                    b.Property<string>("Title")
                        .HasMaxLength(128);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("RuleId");

                    b.ToTable("Rule","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.RuleChangeLog", b =>
                {
                    b.Property<int>("RuleChangeLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<string>("Message")
                        .HasMaxLength(1024);

                    b.Property<int>("RuleId");

                    b.HasKey("RuleChangeLogId");

                    b.HasIndex("RuleId");

                    b.ToTable("RuleChangeLog","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.RuleRiskTemplate", b =>
                {
                    b.Property<int>("RiskTemplateId");

                    b.Property<int>("RuleId");

                    b.HasKey("RiskTemplateId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("RuleRiskTemplate","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.RuleTaskTemplate", b =>
                {
                    b.Property<int>("TaskTemplateId");

                    b.Property<int>("RuleId");

                    b.HasKey("TaskTemplateId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("RuleTaskTemplate","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("InternalDescription")
                        .HasMaxLength(128);

                    b.Property<float>("Order");

                    b.Property<int>("TagCategoryId");

                    b.Property<Guid>("TitleTransId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("TagId");

                    b.HasIndex("TagCategoryId");

                    b.ToTable("Tag","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.TagCategory", b =>
                {
                    b.Property<int>("TagCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("InternalDescription")
                        .HasMaxLength(128);

                    b.Property<string>("Title")
                        .HasMaxLength(128);

                    b.Property<string>("UniqueCode")
                        .HasColumnType("varchar(3)");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("TagCategoryId");

                    b.ToTable("TagCategory","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.TagTree", b =>
                {
                    b.Property<Guid>("TagTreeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("LiveXmlTree")
                        .HasColumnType("xml");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("XmlTree")
                        .HasColumnType("xml");

                    b.HasKey("TagTreeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("TagTree","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.TagType", b =>
                {
                    b.Property<int>("TagTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("InternalDescription")
                        .HasMaxLength(128);

                    b.Property<float>("Order");

                    b.Property<int>("TagCategoryId");

                    b.Property<Guid>("TitleTransId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("TagTypeId");

                    b.HasIndex("TagCategoryId");

                    b.ToTable("TagType","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.TagTypeTag", b =>
                {
                    b.Property<int>("TagTypeId");

                    b.Property<int>("TagId");

                    b.HasKey("TagTypeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagTypeTag","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Todo", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsPerformed");

                    b.Property<int>("Order");

                    b.Property<bool>("RequireDocumentation");

                    b.Property<int>("TaskId");

                    b.Property<string>("Title")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("TodoId");

                    b.HasIndex("TaskId");

                    b.ToTable("Todo","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<long>("PurposeId");

                    b.Property<string>("SalesGroup");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("VendorCategory");

                    b.Property<string>("VendorName");

                    b.HasKey("VendorId");

                    b.ToTable("Vendor","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.VendorTag", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("VendorId");

                    b.HasKey("TagId", "VendorId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorTag","Gdpr");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.ArticleTemplate", b =>
                {
                    b.Property<int>("ArticleTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ArticleDescriptionTransId");

                    b.Property<string>("ArticleInternalTitle");

                    b.Property<Guid?>("ArticleTitleTransId");

                    b.Property<int?>("CountryTagId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool>("IsPublished");

                    b.Property<int?>("LegislationTagId");

                    b.Property<float>("Order");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("ArticleTemplateId");

                    b.HasIndex("CountryTagId");

                    b.HasIndex("LegislationTagId");

                    b.ToTable("ArticleTemplate","GRC");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.RiskTemplate", b =>
                {
                    b.Property<int>("RiskTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool>("IsVisibleAsTemplate");

                    b.Property<float>("Order");

                    b.Property<int>("OrganizationLevel");

                    b.Property<Guid?>("RiskDescriptionTransId");

                    b.Property<string>("RiskInternalTitle");

                    b.Property<Guid?>("RiskTitleTransId");

                    b.Property<int>("RiskTypeId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("RiskTemplateId");

                    b.ToTable("RiskTemplate","GRC");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.RiskTemplateArticleTemplate", b =>
                {
                    b.Property<int>("RiskTemplateId");

                    b.Property<int>("ArticleTemplateId");

                    b.HasKey("RiskTemplateId", "ArticleTemplateId");

                    b.HasIndex("ArticleTemplateId");

                    b.ToTable("RiskTemplateArticleTemplate","GRC");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.RiskTemplateTaskTemplate", b =>
                {
                    b.Property<int>("RiskTemplateId");

                    b.Property<int>("TaskTemplateId");

                    b.HasKey("RiskTemplateId", "TaskTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("RiskTemplateTaskTemplate","GRC");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.TaskTemplate", b =>
                {
                    b.Property<int>("TaskTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assertions")
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("ControlType1");

                    b.Property<int?>("ControlType2");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool>("EnableTaskReview");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<bool>("IsControl");

                    b.Property<bool?>("IsRecurring");

                    b.Property<bool>("IsTemplate");

                    b.Property<float>("Order");

                    b.Property<int?>("PerformerDeadline");

                    b.Property<int?>("ReviewerDueDate");

                    b.Property<int?>("ScheduleType");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.Property<Guid?>("TaskDescriptionTransId");

                    b.Property<string>("TaskInternalTitle");

                    b.Property<Guid?>("TaskTitleTransId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("TaskTemplateId");

                    b.ToTable("TaskTemplate","GRC");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.TodoTemplate", b =>
                {
                    b.Property<int>("TodoTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("RequireDocumentation");

                    b.Property<int>("TaskTemplateId");

                    b.Property<Guid?>("TodoTitleId");

                    b.HasKey("TodoTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("TodoTemplate","GRC");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.AppLog", b =>
                {
                    b.Property<int>("AppLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Browser")
                        .HasMaxLength(200);

                    b.Property<int?>("Column");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Exception")
                        .HasMaxLength(4000);

                    b.Property<string>("ExceptionType")
                        .HasMaxLength(255);

                    b.Property<string>("HostAddress")
                        .HasMaxLength(50);

                    b.Property<string>("Level")
                        .HasMaxLength(50);

                    b.Property<string>("Logger")
                        .HasMaxLength(255);

                    b.Property<string>("Message")
                        .HasMaxLength(8000);

                    b.Property<string>("Method")
                        .HasMaxLength(50);

                    b.Property<int?>("Row");

                    b.Property<string>("Thread")
                        .HasMaxLength(255);

                    b.Property<string>("Url")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("AppLogId");

                    b.ToTable("AppLog","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.ChangeLog", b =>
                {
                    b.Property<int>("ChangeLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChangeLogType");

                    b.Property<DateTimeOffset?>("Date");

                    b.Property<string>("FieldName")
                        .HasMaxLength(250);

                    b.Property<bool?>("FileChanged");

                    b.Property<string>("NewValue");

                    b.Property<string>("OldValue");

                    b.Property<int>("ReferId");

                    b.Property<Guid>("UserId");

                    b.HasKey("ChangeLogId");

                    b.HasIndex("UserId");

                    b.ToTable("ChangeLog","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(10);

                    b.Property<string>("LanguageName")
                        .HasMaxLength(50);

                    b.HasKey("LanguageId");

                    b.ToTable("Language","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.NotificationEvent", b =>
                {
                    b.Property<int>("NotificationEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedDate");

                    b.HasKey("NotificationEventId");

                    b.ToTable("NotificationEvent","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.NotificationHistory", b =>
                {
                    b.Property<int>("NotificationHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<int>("EventId");

                    b.Property<int>("MessageId");

                    b.HasKey("NotificationHistoryId");

                    b.ToTable("NotificationHistory","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.NotificationSetting", b =>
                {
                    b.Property<int>("NotificationSettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MessageTemplateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short?>("Repeat");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("NotificationSettingId");

                    b.ToTable("NotificationSetting","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.NotificationTemplate", b =>
                {
                    b.Property<int>("NotificationTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("InternalMessage");

                    b.Property<string>("InternalSubject");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("MessageTranslationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("NotificationEventId");

                    b.Property<Guid>("SubjectTranslationId");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("NotificationTemplateId");

                    b.HasIndex("NotificationEventId");

                    b.ToTable("NotificationTemplate","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.OverviewPageSetting", b =>
                {
                    b.Property<int>("OverviewPageSettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Icon");

                    b.Property<Guid>("NameTranslationId");

                    b.Property<float>("Order");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("Url");

                    b.HasKey("OverviewPageSettingId");

                    b.ToTable("OverviewPageSetting","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.OverviewPageSettingRole", b =>
                {
                    b.Property<int>("OverviewPageSettingId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("OverviewPageSettingId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("OverviewPageSettingRole","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.Translation", b =>
                {
                    b.Property<Guid>("TranslationId");

                    b.Property<int>("LanguageId");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("TranslatedText");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.HasKey("TranslationId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translation","Internal");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role","User");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleClaimId");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim","User");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTimeOffset?>("CreatedOn");

                    b.Property<Guid?>("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128);

                    b.Property<bool?>("IsNeedChangePass");

                    b.Property<int?>("LanguageId");

                    b.Property<DateTimeOffset?>("LastLogin");

                    b.Property<string>("LastName")
                        .HasMaxLength(128);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("OrganizationalLevelId");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedOn");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User","User");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserClaimId");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim","User");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin","User");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole","User");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken","User");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.Company", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "AccountOwner")
                        .WithOne("Company")
                        .HasForeignKey("MoneyTransferApp.Core.Entities.Client.Company", "AccountOwnerId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.CompanyAddOn", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.CompanyDetail", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithOne("CompanyDetail")
                        .HasForeignKey("MoneyTransferApp.Core.Entities.Client.CompanyDetail", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "CountryTag")
                        .WithMany("CompanyDetailsCountry")
                        .HasForeignKey("CountryTagId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "CurrencyTag")
                        .WithMany("CompanyDetailsCurrency")
                        .HasForeignKey("CurrencyTagId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "IndustryTag")
                        .WithMany("CompanyDetailsIndustry")
                        .HasForeignKey("IndustryTagId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "NumOfEmployeesTag")
                        .WithMany("CompanyDetailsNumOfEmployees")
                        .HasForeignKey("NumOfEmployeesTagId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.CompanySubscription", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany("CompanySubscriptions")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.ContactPoint", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany("ContactPoints")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.History", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Client.Subsidiary", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany("Subsidiaries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "CountryTag")
                        .WithMany("SubsidiariesCountry")
                        .HasForeignKey("CountryTagId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Answer", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Condition", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Condition", "ParentCondition")
                        .WithMany("ChildrenConditions")
                        .HasForeignKey("ParentConditionId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Rule", "Rule")
                        .WithMany("Conditions")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Counterpart", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.DataProcessor", "DataProcessor")
                        .WithMany("Counterparts")
                        .HasForeignKey("DataProcessorId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.CounterpartSubsidiary", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Counterpart", "Counterpart")
                        .WithMany("CounterpartSubsidiaries")
                        .HasForeignKey("CounterpartId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.DataProcessor", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "Approver")
                        .WithMany("DataProcessorApprovers")
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany("DataProcessors")
                        .HasForeignKey("CompanyId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.DataProcessorTemplate", "DataProcessorTemplate")
                        .WithMany()
                        .HasForeignKey("DataProcessorTemplateId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "Responsible")
                        .WithMany("DataProcessorResponsibles")
                        .HasForeignKey("ResponsibleId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.DataProcessorChangeLog", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.DataProcessorTemplate", "DataProcessorTemplate")
                        .WithMany("DataProcessorChangeLogs")
                        .HasForeignKey("DataProcessorTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.DeletionJustification", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Purpose", "Purpose")
                        .WithMany("DeletionJustifications")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.GdprDocument", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany("GdprDocuments")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.GdprTask", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Process", "Process")
                        .WithMany("GdprTasks")
                        .HasForeignKey("ProcessId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Risk", "Risk")
                        .WithMany("GdprTasks")
                        .HasForeignKey("RiskId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "TaskPerformer")
                        .WithMany("TaskPerformers")
                        .HasForeignKey("TaskPerformerId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "TaskResponsible")
                        .WithMany("TaskResponsibles")
                        .HasForeignKey("TaskResponsibleId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "TaskReviewer")
                        .WithMany("TaskReviewers")
                        .HasForeignKey("TaskReviewerId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Policy", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.PolicyTemplate", "PolicyTemplate")
                        .WithMany()
                        .HasForeignKey("PolicyTemplateId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Process", "Process")
                        .WithMany("Policies")
                        .HasForeignKey("ProcessId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "Responsible")
                        .WithMany("PolicyResponsibles")
                        .HasForeignKey("ResponsibleId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.PolicyChangeLog", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.PolicyTemplate", "PolicyTemplate")
                        .WithMany("PolicyChangeLogs")
                        .HasForeignKey("PolicyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Process", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany("Processes")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Risk", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Process", "Process")
                        .WithMany("Risks")
                        .HasForeignKey("ProcessId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "RiskOwner")
                        .WithMany("RiskOwners")
                        .HasForeignKey("RiskOwnerId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "RiskResponsible")
                        .WithMany("RiskResponsibles")
                        .HasForeignKey("RiskResponsibleId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.RuleChangeLog", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Rule", "Rule")
                        .WithMany("RuleChangeLogs")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.RuleRiskTemplate", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.GRC.RiskTemplate", "RiskTemplates")
                        .WithMany()
                        .HasForeignKey("RiskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Rule", "Rule")
                        .WithMany("RuleRiskTemplates")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.RuleTaskTemplate", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Rule", "Rule")
                        .WithMany("RuleTaskTemplates")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.GRC.TaskTemplate", "TaskTemplates")
                        .WithMany("RuleTaskTemplates")
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Tag", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.TagCategory", "TagCategory")
                        .WithMany("Tags")
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.TagTree", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Client.Company", "Company")
                        .WithMany("TagTrees")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.TagType", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.TagCategory", "TagCategorys")
                        .WithMany("TagTypes")
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.TagTypeTag", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "Tag")
                        .WithMany("TagTypeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.TagType", "TagType")
                        .WithMany("TagTypeTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.Todo", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.GdprTask", "GdprTask")
                        .WithMany("Todos")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Gdpr.VendorTag", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "Tag")
                        .WithMany("VendorTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Vendor", "Vendor")
                        .WithMany("VendorTags")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.ArticleTemplate", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "CountryTag")
                        .WithMany("ArticleTemplatesCountry")
                        .HasForeignKey("CountryTagId");

                    b.HasOne("MoneyTransferApp.Core.Entities.Gdpr.Tag", "LegislationTag")
                        .WithMany("ArticleTemplatesLegislation")
                        .HasForeignKey("LegislationTagId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.RiskTemplateArticleTemplate", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.GRC.ArticleTemplate", "ArticleTemplates")
                        .WithMany("RiskTemplateArticleTemplates")
                        .HasForeignKey("ArticleTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.GRC.RiskTemplate", "RiskTemplates")
                        .WithMany("RiskTemplateArticleTemplates")
                        .HasForeignKey("RiskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.RiskTemplateTaskTemplate", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.GRC.RiskTemplate", "RiskTemplates")
                        .WithMany("RiskTemplateTaskTemplates")
                        .HasForeignKey("RiskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.GRC.TaskTemplate", "TaskTemplates")
                        .WithMany("RiskTemplateTaskTemplates")
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.GRC.TodoTemplate", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.GRC.TaskTemplate", "TaskTemplate")
                        .WithMany("TodoTemplates")
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.ChangeLog", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "User")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.NotificationTemplate", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Internal.NotificationEvent", "NotificationEvent")
                        .WithMany()
                        .HasForeignKey("NotificationEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.OverviewPageSettingRole", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Internal.OverviewPageSetting", "OverviewPageSetting")
                        .WithMany("OverviewPageSettingRoles")
                        .HasForeignKey("OverviewPageSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Internal.Translation", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Internal.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.RoleClaim", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.User", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Internal.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserClaim", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserLogin", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserRole", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoneyTransferApp.Core.Entities.Users.UserToken", b =>
                {
                    b.HasOne("MoneyTransferApp.Core.Entities.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
